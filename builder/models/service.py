"""
@TODO: Put a module wide description here
"""
from __future__ import annotations

import typing

from django.db import models
from django.core.validators import RegexValidator
from django.core.validators import MinValueValidator
from django.core.validators import MaxValueValidator

from builder.models.common import StringMap

SAFE_STRING_PATTERN = RegexValidator(
    "^[a-zA-Z0-9][a-zA-Z0-9_.-]+$",
    message="Value must follow the format of '[a-zA-Z0-9][a-zA-Z0-9_.-]+'"
)
MINIMUM_IS_ZERO = MinValueValidator(limit_value=0, message="The value must be more than 0")
MAXIMUM_IS_ONE_HUNDRED = MaxValueValidator(limit_value=100.0001, message="The value must be less than or equal to 100")


class Service(models.Model):
    """
    Represents a Docker service
    """
    attach: bool = models.BooleanField(
        default=True,
        help_text="When attach is defined and set to false Compose does not collect service logs, "
                  "until you explicitly request it to."
    )

    # blkio_config is a little too deep in the weeds for now, so that won't be implemented yet

    cpu_count: typing.Optional[int] = models.PositiveIntegerField(
        help_text="Number of usable CPUs for the service container",
        validators=[MINIMUM_IS_ZERO],
        blank=True,
        null=True
    )
    cpu_percent: typing.Optional[float] = models.FloatField(
        help_text="The usable percentage of the available CPUs",
        validators=[MINIMUM_IS_ZERO],
        blank=True,
        null=True
    )
    cpu_shares = models.PositiveIntegerField(
        help_text="The service container's relative CPU weight versus other containers",
        validators=[MINIMUM_IS_ZERO],
        blank=True,
        null=True
    )

    # cpu_period is a little too deep in the weeds for now, so that won't be implemented yet

    # cpu_quota is a bit too deep in the weeds for now, so that won't be implemented

    # cpu_rt_runtime is a bit too deep in the weeds for now so that won't be implemented

    # cpu_rt_period is a bit too deep in the weeds for now so that won't be implemented

    # cpuset is a bit too deep in the weeds so that won't be implemented yet

    # cap_add is a bit too deep in the weeds so that won't be implemented yet

    # cap_drop is a bit too deep in the weeds so that won't be implemented yet

    # cgroup is a little too deep in the weeds so that won't be implemented yet

    # cgroup_parent is a little too deep in the weeds so that won't be implemented yet

    command: typing.Optional[str] = models.CharField(
        max_length=255,
        help_text="A command used to override one defined within a Dockerfile's CMD declaration",
        blank=True,
        null=True
    )

    # configs is a feature that may not be included, so that won't be evaluated at the moment

    container_name: typing.Optional[str] = models.CharField(
        max_length=255,
        help_text="A string that specifies a custom container name, rather than a name generated by default. "
                  "Compose does not scale a service beyond one container if the Compose file specifies a "
                  "container_name. Attempting to do so results in an error.",
        blank=True,
        null=True,
        validators=[SAFE_STRING_PATTERN]
    )

    # credential_spec is a bit too deep in the weeds so that won't be evaluated at the moment

    # develop is a fairly new option, so it'll be implemented later


class ServiceDependencyCondition(models.TextChoices):
    service_started = "service_started"
    service_healthy = "service_healthy"
    service_completed_successfully = "service_completed_successfully"


class ServiceDependency(models.Model):
    """
    Describes how a service may be reliant on another service
    """
    service: Service = models.ForeignKey(Service, on_delete=models.CASCADE, related_name='depends_on')
    name: str = models.CharField(max_length=255, help_text="The name of the service that this service depends on")
    restart: bool = models.BooleanField(
        default=False,
        help_text="When set to true Compose restarts this service after it updates the dependency service. "
                  "This applies to an explicit restart controlled by a Compose operation, and excludes automated "
                  "restart by the container runtime after the container dies."
    )
    condition: typing.Optional[str] = models.CharField(
        default=None,
        choices=ServiceDependencyCondition,
        help_text="Sets the condition under which dependency is considered satisfied",
        null=True,
        blank=True
    )
    required: bool = models.BooleanField(
        default=True,
        help_text="When set to false Compose only warns you when the dependency service isn't started or available."
    )

    @property
    def value(self) -> typing.Union[str, typing.Dict[str, typing.Any]]:
        pass


class ServiceAnnotation(StringMap):
    """
    Defines annotations for a container
    """
    service: Service = models.ForeignKey(Service, on_delete=models.CASCADE, related_name="annotations")



